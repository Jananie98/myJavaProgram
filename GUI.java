/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package commissiondistributor;

import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;


import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;


/**
 *
 * @author it232108
 */
public class GUI extends javax.swing.JFrame {
    
    private static Statement stmt, stmt2, stmt3;
    Connection con = null;
    String ip = null;
    String library = null;
    String absoluteFilePath = "";
    ResultSet urs, brch; 
    

    /**
     * Creates new form GUI
     */
    public GUI() {
       try {
            String workingDirectory = System.getProperty("user.dir");
            new File(workingDirectory + "\\log").mkdir();
            absoluteFilePath = workingDirectory + File.separator + "config.properties";
            Properties prop = new Properties();
            prop.load(new FileInputStream(absoluteFilePath));
            ip = prop.getProperty("ip");
            library = prop.getProperty("library");
            try {
                Class.forName("com.ibm.as400.access.AS400JDBCDriver").newInstance();
                con = DriverManager.getConnection("jdbc:as400://" + ip + ";libraries=" + library, "", "");
                //con = DriverManager.getConnection("jdbc:as400://" + ip + ";libraries=" + library, "IT203836CH", "IT203836CH");
                //con = DriverManager.getConnection("jdbc:as400://172.21.12.100;libraries=bocproddta", "sg203836", "sg203836");
                //   con = DriverManager.getConnection("jdbc:as400://172.20.12.100;libraries=bocproddta", "icbsmig", "icbsmig");

                con.setAutoCommit(false);

                initComponents();
                
            } catch (Exception ex) {
                ex.printStackTrace();
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                System.exit(0);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        lblAlert = new javax.swing.JLabel();
        btnProcess = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        lblAlert.setText("jLabel1");

        btnProcess.setText("Process");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jFileChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblAlert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(30, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExit)
                .addGap(18, 18, 18)
                .addComponent(btnProcess)
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAlert, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProcess)
                    .addComponent(btnExit))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        // TODO add your handling code here:
        btnProcess.hide();
        btnExit.setVisible(false);
        int headerDataId = 0;
        boolean dup = false;
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-HH.mm.ss");//2021-04-01-00.00.00.000000
        Date date = new Date();
        String file_to = dateFormat.format(date) + ".txt";
        //System.out.println(file_to);
        File file = new File(jFileChooser1.getSelectedFile().getAbsolutePath());
        //File file = new File("C:\\Users\\BOC\\Desktop\\INWORD\\a.dat");

        ArrayList<String[]> comdisRecords = new ArrayList<String[]>();

        if (!file.exists()) {
            lblAlert.setForeground(Color.red);
            lblAlert.setText(file.getName() + " does not exists.");
            return;
        }
        if (!(file.isFile() && file.canRead())) {
            lblAlert.setForeground(Color.red);
            lblAlert.setText(file.getName() + " not in a readable form.");
            return;
        }

        PrintWriter writer = null;
        try {
            stmt = con.createStatement();
            stmt2 = con.createStatement();
            stmt3 = con.createStatement();

            urs = stmt2.executeQuery("values(USER)");

            urs.next();
            String username = urs.getString(1);

            brch = stmt3.executeQuery("SELECT SCBRN FROM scp9006 WHERE SCUSER = '" + username + "' and SCBK = 1");
            brch.next();
            String branch = brch.getString(1);
            //String branch = "003";

            FileInputStream fis = new FileInputStream(file);
            XSSFWorkbook wb = new XSSFWorkbook(fis);
            XSSFSheet sheet = wb.getSheetAt(0);     //creating a Sheet object to retrieve object  
            Iterator<Row> itr = sheet.iterator();    //iterating over excel file  
            //itr.next();
            
            int creditTotal = 0; 
            int debitTotal = 0;
            int subseq = 0;
            String [] comdis = null;
            
            while (itr.hasNext()) {
                comdis = new String[18];
                Row row = itr.next();

                System.out.println(row.getCell(2));
                //System.out.println(row.getCell(1));
                Iterator<Cell> cellIterator = row.cellIterator();   //iterating over each column  
                int cellCount = 0;

                while (cellIterator.hasNext()) {
                    Cell cell = cellIterator.next();
                    comdis[cellCount] = " ";
                    System.out.println(comdis[cellCount]);
                    switch (cell.getCellType()) {
                        case Cell.CELL_TYPE_STRING:
                            comdis[cellCount] = cell.getStringCellValue();
                            System.out.println(comdis[cellCount]);
                            break;
                        case Cell.CELL_TYPE_NUMERIC:
                            //if (cellCount == 6) {
                            //    comdis[cellCount] = String.valueOf(String.format("%.02f", cell.getNumericCellValue()));
                            //} else {
                                comdis[cellCount] = String.valueOf(String.format("%.0f", cell.getNumericCellValue()));
                            //}
                            System.out.println(comdis[cellCount]);
                            break;
                        default:
                    }
                    cellCount++;
                }

                cellCount = 0;
                comdisRecords.add(comdis);                
                //System.out.println(neft[9]);
                System.out.println("done");
            }

            String sql1 = "select max(CDISID) from CDIS001";
                    ResultSet m_ResultSet = stmt.executeQuery(sql1);
                    m_ResultSet.next();
                    headerDataId = m_ResultSet.getInt(1) + 1;
                    String desc2 = "";
                    
// myArrayList.get(myArrayList.size()-1) ----> i <= comdisRecords.size()-1
// comdisRecords.get(comdisRecords.size()-1)
                    
            for (int i = 0; i < comdisRecords.size(); i++) {   
                
//            if(comdisRecords.get(i)[6].trim().length() > 30)
//                desc2 = comdisRecords.get(i)[6].trim().substring(0,29);
//            else 
//                desc2 = comdisRecords.get(i)[6].trim();

// 
                    
//              if(comdisRecords.get(i)[0].isEmpty()){
//                System.out.println("No more records");
//                }else{
                    subseq += 1;
                    String sqlDetail = "insert into CDIS0101 (CDISID,CDISRECNO,CDISACCNO,CDISCC,CDISCODE,CDISAMT,CDISNO,CDISDES1,CDISDES2,CDISDES3,CDISAPPCD) "
                            + "values(  " + headerDataId +","+subseq+ " ," + comdisRecords.get(i)[0] + "," + comdisRecords.get(i)[1] + "," + comdisRecords.get(i)[2] + "," + comdisRecords.get(i)[3] + "," + comdisRecords.get(i)[4] + ",'" + comdisRecords.get(i)[5] + "','" + desc2 + "','" + comdisRecords.get(i)[7] + "'," + comdisRecords.get(i)[8]+")";
                    
                    System.out.println(sqlDetail);  
                    
                    if (comdisRecords.get(i)[2].equals("10")){
                         creditTotal += Integer.parseInt(comdisRecords.get(i)[3]);
                    }else if (comdisRecords.get(i)[2].equals("81")){
                        debitTotal += Integer.parseInt(comdisRecords.get(i)[3]);
                    }

                    try {
                        stmt.executeUpdate(sqlDetail);                        

                    } catch (SQLException ex) {
                        ex.printStackTrace();
                        lblAlert.setForeground(Color.red);
                        lblAlert.setText("Do not try to upload wrong files.");
                        return;
                    }
//                }                    
            }
                     
            String sqlHeader = "insert into CDIS0201 (CDISID,CDISCRTTL,CDIDDRTTL,CDISUSR,CDISBRN,CDISDTS,CDISAPPUSR,CDISAPDTS,CDISFSTS)"
                            + "values (" +headerDataId + "," +creditTotal+ "," +debitTotal+ ",'" +username+ "'," +branch+ ",'" + dateFormat.format(date) +"','','0001-01-01-00.00.00','C')";
                
            System.out.println(sqlHeader);
            
            try {                        
                stmt2.executeUpdate(sqlHeader);

            } catch (SQLException ex) {
                ex.printStackTrace();
                lblAlert.setForeground(Color.red);
                lblAlert.setText("Do not try to upload wrong files.");
                return;
            }
            
            //con.commit(); 
        } catch (IOException ex) {
            //con.rollback();
             lblAlert.setForeground(Color.red);
            lblAlert.setText(ex.getMessage());
            ex.printStackTrace();
        } catch (SQLException ex) {
            //con.rollback();
            lblAlert.setForeground(Color.red);
            lblAlert.setText(ex.getMessage());
            ex.printStackTrace();
        } catch (Exception ex) {
            //con.rollback();
            lblAlert.setText(ex.getMessage());
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnProcessActionPerformed

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        try {
            // TODO add your handling code here:
            con.rollback();
            lblAlert.setForeground(Color.red);
            lblAlert.setText("File upload canceled");
        
        } catch (SQLException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            //writer.close();

            btnExit.setVisible(true);
            try {
                con.close();
                stmt.close();
                stmt2.close();
                stmt3.close();
            } catch (SQLException ex) {
                lblAlert.setForeground(Color.red);
                lblAlert.setText(ex.getMessage());
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnProcess;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel lblAlert;
    // End of variables declaration//GEN-END:variables

    private int get(int i) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
